=begin
#AB_WebAPI

#Animation Builder Web API

OpenAPI spec version: 1.0.0

Generated by: https://github.com/swagger-api/swagger-codegen.git

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

=end

require "uri"

module SwaggerClient
  class TemplatesApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end

    # Get Templates.
    # Get all templates.
    # @param [Hash] opts the optional parameters
    # @return [TemplateDTOList]
    def templates_get(opts = {})
      data, _status_code, _headers = templates_get_with_http_info(opts)
      return data
    end

    # Get Templates.
    # Get all templates.
    # @param [Hash] opts the optional parameters
    # @return [Array<(TemplateDTOList, Fixnum, Hash)>] TemplateDTOList data, response status code and response headers
    def templates_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: TemplatesApi.templates_get ..."
      end
      # resource path
      local_var_path = "/templates".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = []
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'TemplateDTOList')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TemplatesApi#templates_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Publish Template.
    # Publish a new template.
    # @param publish_request An object containing the details of the requested publish.
    # @param [Hash] opts the optional parameters
    # @return [Integer]
    def templates_post(publish_request, opts = {})
      data, _status_code, _headers = templates_post_with_http_info(publish_request, opts)
      return data
    end

    # Publish Template.
    # Publish a new template.
    # @param publish_request An object containing the details of the requested publish.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Integer, Fixnum, Hash)>] Integer data, response status code and response headers
    def templates_post_with_http_info(publish_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: TemplatesApi.templates_post ..."
      end
      # verify the required parameter 'publish_request' is set
      fail ArgumentError, "Missing the required parameter 'publish_request' when calling TemplatesApi.templates_post" if publish_request.nil?
      # resource path
      local_var_path = "/templates".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = []
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(publish_request)
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Integer')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TemplatesApi#templates_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete Template.
    # Delete template.
    # @param template_id The ID of the template to delete.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def templates_template_id_delete(template_id, opts = {})
      templates_template_id_delete_with_http_info(template_id, opts)
      return nil
    end

    # Delete Template.
    # Delete template.
    # @param template_id The ID of the template to delete.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def templates_template_id_delete_with_http_info(template_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: TemplatesApi.templates_template_id_delete ..."
      end
      # verify the required parameter 'template_id' is set
      fail ArgumentError, "Missing the required parameter 'template_id' when calling TemplatesApi.templates_template_id_delete" if template_id.nil?
      # resource path
      local_var_path = "/templates/{templateId}".sub('{format}','json').sub('{' + 'templateId' + '}', template_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = []
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TemplatesApi#templates_template_id_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get Template.
    # Get a specific template.
    # @param template_id The ID of the desired template.
    # @param [Hash] opts the optional parameters
    # @return [TemplateDTO]
    def templates_template_id_get(template_id, opts = {})
      data, _status_code, _headers = templates_template_id_get_with_http_info(template_id, opts)
      return data
    end

    # Get Template.
    # Get a specific template.
    # @param template_id The ID of the desired template.
    # @param [Hash] opts the optional parameters
    # @return [Array<(TemplateDTO, Fixnum, Hash)>] TemplateDTO data, response status code and response headers
    def templates_template_id_get_with_http_info(template_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: TemplatesApi.templates_template_id_get ..."
      end
      # verify the required parameter 'template_id' is set
      fail ArgumentError, "Missing the required parameter 'template_id' when calling TemplatesApi.templates_template_id_get" if template_id.nil?
      # resource path
      local_var_path = "/templates/{templateId}".sub('{format}','json').sub('{' + 'templateId' + '}', template_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = []
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'TemplateDTO')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TemplatesApi#templates_template_id_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get Groups By Template.
    # Get all groups made from a template.
    # @param template_id The ID of the template.
    # @param [Hash] opts the optional parameters
    # @return [GroupDTOList]
    def templates_template_id_groups_get(template_id, opts = {})
      data, _status_code, _headers = templates_template_id_groups_get_with_http_info(template_id, opts)
      return data
    end

    # Get Groups By Template.
    # Get all groups made from a template.
    # @param template_id The ID of the template.
    # @param [Hash] opts the optional parameters
    # @return [Array<(GroupDTOList, Fixnum, Hash)>] GroupDTOList data, response status code and response headers
    def templates_template_id_groups_get_with_http_info(template_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: TemplatesApi.templates_template_id_groups_get ..."
      end
      # verify the required parameter 'template_id' is set
      fail ArgumentError, "Missing the required parameter 'template_id' when calling TemplatesApi.templates_template_id_groups_get" if template_id.nil?
      # resource path
      local_var_path = "/templates/{templateId}/groups".sub('{format}','json').sub('{' + 'templateId' + '}', template_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = []
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'GroupDTOList')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TemplatesApi#templates_template_id_groups_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create Group.
    # Create a new group from a template.
    # @param template_id The ID of the template for the new group.
    # @param [Hash] opts the optional parameters
    # @return [Integer]
    def templates_template_id_groups_post(template_id, opts = {})
      data, _status_code, _headers = templates_template_id_groups_post_with_http_info(template_id, opts)
      return data
    end

    # Create Group.
    # Create a new group from a template.
    # @param template_id The ID of the template for the new group.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Integer, Fixnum, Hash)>] Integer data, response status code and response headers
    def templates_template_id_groups_post_with_http_info(template_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: TemplatesApi.templates_template_id_groups_post ..."
      end
      # verify the required parameter 'template_id' is set
      fail ArgumentError, "Missing the required parameter 'template_id' when calling TemplatesApi.templates_template_id_groups_post" if template_id.nil?
      # resource path
      local_var_path = "/templates/{templateId}/groups".sub('{format}','json').sub('{' + 'templateId' + '}', template_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = []
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Integer')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TemplatesApi#templates_template_id_groups_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
