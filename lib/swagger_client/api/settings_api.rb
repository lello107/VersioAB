=begin
#AB_WebAPI

#Animation Builder Web API

OpenAPI spec version: 1.0.0

Generated by: https://github.com/swagger-api/swagger-codegen.git

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

=end

require "uri"

module SwaggerClient
  class SettingsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end

    # Get Local Layouts.
    # Get local layouts.
    # @param [Hash] opts the optional parameters
    # @return [VersioLayoutList]
    def settings_layouts_get(opts = {})
      data, _status_code, _headers = settings_layouts_get_with_http_info(opts)
      return data
    end

    # Get Local Layouts.
    # Get local layouts.
    # @param [Hash] opts the optional parameters
    # @return [Array<(VersioLayoutList, Fixnum, Hash)>] VersioLayoutList data, response status code and response headers
    def settings_layouts_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: SettingsApi.settings_layouts_get ..."
      end
      # resource path
      local_var_path = "/settings/layouts".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = []
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'VersioLayoutList')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SettingsApi#settings_layouts_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get File Picker Roots.
    # Get file picker roots.
    # @param [Hash] opts the optional parameters
    # @return [RootList]
    def settings_roots_filepicker_get(opts = {})
      data, _status_code, _headers = settings_roots_filepicker_get_with_http_info(opts)
      return data
    end

    # Get File Picker Roots.
    # Get file picker roots.
    # @param [Hash] opts the optional parameters
    # @return [Array<(RootList, Fixnum, Hash)>] RootList data, response status code and response headers
    def settings_roots_filepicker_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: SettingsApi.settings_roots_filepicker_get ..."
      end
      # resource path
      local_var_path = "/settings/roots/filepicker".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = []
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'RootList')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SettingsApi#settings_roots_filepicker_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get Output Roots.
    # Get render output roots.
    # @param [Hash] opts the optional parameters
    # @return [RootList]
    def settings_roots_output_get(opts = {})
      data, _status_code, _headers = settings_roots_output_get_with_http_info(opts)
      return data
    end

    # Get Output Roots.
    # Get render output roots.
    # @param [Hash] opts the optional parameters
    # @return [Array<(RootList, Fixnum, Hash)>] RootList data, response status code and response headers
    def settings_roots_output_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: SettingsApi.settings_roots_output_get ..."
      end
      # resource path
      local_var_path = "/settings/roots/output".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = []
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'RootList')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SettingsApi#settings_roots_output_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get Available Versios.
    # Get available Versios.
    # @param [Hash] opts the optional parameters
    # @return [VersioList]
    def settings_versios_get(opts = {})
      data, _status_code, _headers = settings_versios_get_with_http_info(opts)
      return data
    end

    # Get Available Versios.
    # Get available Versios.
    # @param [Hash] opts the optional parameters
    # @return [Array<(VersioList, Fixnum, Hash)>] VersioList data, response status code and response headers
    def settings_versios_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: SettingsApi.settings_versios_get ..."
      end
      # resource path
      local_var_path = "/settings/versios".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = []
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'VersioList')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SettingsApi#settings_versios_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
