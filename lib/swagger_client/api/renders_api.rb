=begin
#AB_WebAPI

#Animation Builder Web API

OpenAPI spec version: 1.0.0

Generated by: https://github.com/swagger-api/swagger-codegen.git

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

=end

require "uri"

module SwaggerClient
  class RendersApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end

    # Get Active Renders.
    # Get list of active renders.
    # @param [Hash] opts the optional parameters
    # @return [RenderBatchDTOList]
    def renders_active_get(opts = {})
      data, _status_code, _headers = renders_active_get_with_http_info(opts)
      return data
    end

    # Get Active Renders.
    # Get list of active renders.
    # @param [Hash] opts the optional parameters
    # @return [Array<(RenderBatchDTOList, Fixnum, Hash)>] RenderBatchDTOList data, response status code and response headers
    def renders_active_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: RendersApi.renders_active_get ..."
      end
      # resource path
      local_var_path = "/renders/active".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = []
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'RenderBatchDTOList')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RendersApi#renders_active_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Cancel Active Render.
    # Cancel active render.
    # @param render_id Id of the render to cancel.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def renders_active_render_id_delete(render_id, opts = {})
      renders_active_render_id_delete_with_http_info(render_id, opts)
      return nil
    end

    # Cancel Active Render.
    # Cancel active render.
    # @param render_id Id of the render to cancel.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def renders_active_render_id_delete_with_http_info(render_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: RendersApi.renders_active_render_id_delete ..."
      end
      # verify the required parameter 'render_id' is set
      fail ArgumentError, "Missing the required parameter 'render_id' when calling RendersApi.renders_active_render_id_delete" if render_id.nil?
      # resource path
      local_var_path = "/renders/active/{renderId}".sub('{format}','json').sub('{' + 'renderId' + '}', render_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = []
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RendersApi#renders_active_render_id_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get Completed Renders.
    # Get list of completed renders.
    # @param [Hash] opts the optional parameters
    # @return [RenderBatchDTOList]
    def renders_completed_get(opts = {})
      data, _status_code, _headers = renders_completed_get_with_http_info(opts)
      return data
    end

    # Get Completed Renders.
    # Get list of completed renders.
    # @param [Hash] opts the optional parameters
    # @return [Array<(RenderBatchDTOList, Fixnum, Hash)>] RenderBatchDTOList data, response status code and response headers
    def renders_completed_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: RendersApi.renders_completed_get ..."
      end
      # resource path
      local_var_path = "/renders/completed".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = []
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'RenderBatchDTOList')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RendersApi#renders_completed_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create Render Request.
    # Create new render request for an edit set.
    # @param set_id The ID of the edit set.
    # @param render_type The type of render (SmallPreview, LargePreview, or Full).
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def renders_create_set_id_render_type_post(set_id, render_type, opts = {})
      renders_create_set_id_render_type_post_with_http_info(set_id, render_type, opts)
      return nil
    end

    # Create Render Request.
    # Create new render request for an edit set.
    # @param set_id The ID of the edit set.
    # @param render_type The type of render (SmallPreview, LargePreview, or Full).
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def renders_create_set_id_render_type_post_with_http_info(set_id, render_type, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: RendersApi.renders_create_set_id_render_type_post ..."
      end
      # verify the required parameter 'set_id' is set
      fail ArgumentError, "Missing the required parameter 'set_id' when calling RendersApi.renders_create_set_id_render_type_post" if set_id.nil?
      # verify the required parameter 'render_type' is set
      fail ArgumentError, "Missing the required parameter 'render_type' when calling RendersApi.renders_create_set_id_render_type_post" if render_type.nil?
      # resource path
      local_var_path = "/renders/create/{setId}/{renderType}".sub('{format}','json').sub('{' + 'setId' + '}', set_id.to_s).sub('{' + 'renderType' + '}', render_type.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = []
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RendersApi#renders_create_set_id_render_type_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Subscribe Renders.
    # Subscribe to render status notifications through a websocket connection.               This connection must be set up before using the subscribe group and subscribe item methods.              See also /renders/subscribe/{groupId} and /renders/subscribeItem/{requestItemId}.
    # @param [Hash] opts the optional parameters
    # @return [NotificationMessage]
    def renders_notifications_options(opts = {})
      data, _status_code, _headers = renders_notifications_options_with_http_info(opts)
      return data
    end

    # Subscribe Renders.
    # Subscribe to render status notifications through a websocket connection.               This connection must be set up before using the subscribe group and subscribe item methods.              See also /renders/subscribe/{groupId} and /renders/subscribeItem/{requestItemId}.
    # @param [Hash] opts the optional parameters
    # @return [Array<(NotificationMessage, Fixnum, Hash)>] NotificationMessage data, response status code and response headers
    def renders_notifications_options_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: RendersApi.renders_notifications_options ..."
      end
      # resource path
      local_var_path = "/renders/notifications".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = []
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:OPTIONS, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'NotificationMessage')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RendersApi#renders_notifications_options\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Check Output Exists.
    # Check if output exists on disk or on versio.
    # @param group_id Id of the group the render is located.
    # @param set_id Id of the set the render is located.
    # @param [Hash] opts the optional parameters
    # @return [BOOLEAN]
    def renders_output_group_id_set_id_get(group_id, set_id, opts = {})
      data, _status_code, _headers = renders_output_group_id_set_id_get_with_http_info(group_id, set_id, opts)
      return data
    end

    # Check Output Exists.
    # Check if output exists on disk or on versio.
    # @param group_id Id of the group the render is located.
    # @param set_id Id of the set the render is located.
    # @param [Hash] opts the optional parameters
    # @return [Array<(BOOLEAN, Fixnum, Hash)>] BOOLEAN data, response status code and response headers
    def renders_output_group_id_set_id_get_with_http_info(group_id, set_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: RendersApi.renders_output_group_id_set_id_get ..."
      end
      # verify the required parameter 'group_id' is set
      fail ArgumentError, "Missing the required parameter 'group_id' when calling RendersApi.renders_output_group_id_set_id_get" if group_id.nil?
      # verify the required parameter 'set_id' is set
      fail ArgumentError, "Missing the required parameter 'set_id' when calling RendersApi.renders_output_group_id_set_id_get" if set_id.nil?
      # resource path
      local_var_path = "/renders/output/{groupId}/{setId}".sub('{format}','json').sub('{' + 'groupId' + '}', group_id.to_s).sub('{' + 'setId' + '}', set_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = []
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'BOOLEAN')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RendersApi#renders_output_group_id_set_id_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get Queued Renders.
    # Get list of queued renders.
    # @param [Hash] opts the optional parameters
    # @return [RenderBatchDTOList]
    def renders_queued_get(opts = {})
      data, _status_code, _headers = renders_queued_get_with_http_info(opts)
      return data
    end

    # Get Queued Renders.
    # Get list of queued renders.
    # @param [Hash] opts the optional parameters
    # @return [Array<(RenderBatchDTOList, Fixnum, Hash)>] RenderBatchDTOList data, response status code and response headers
    def renders_queued_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: RendersApi.renders_queued_get ..."
      end
      # resource path
      local_var_path = "/renders/queued".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = []
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'RenderBatchDTOList')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RendersApi#renders_queued_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Cancel Queued Render.
    # Cancel queued render.
    # @param render_id Id of the render to cancel.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def renders_queued_render_id_delete(render_id, opts = {})
      renders_queued_render_id_delete_with_http_info(render_id, opts)
      return nil
    end

    # Cancel Queued Render.
    # Cancel queued render.
    # @param render_id Id of the render to cancel.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def renders_queued_render_id_delete_with_http_info(render_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: RendersApi.renders_queued_render_id_delete ..."
      end
      # verify the required parameter 'render_id' is set
      fail ArgumentError, "Missing the required parameter 'render_id' when calling RendersApi.renders_queued_render_id_delete" if render_id.nil?
      # resource path
      local_var_path = "/renders/queued/{renderId}".sub('{format}','json').sub('{' + 'renderId' + '}', render_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = []
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RendersApi#renders_queued_render_id_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Subscribe Group.
    # Subscribe to notifications from a group.               Subscribing to a group will allow notifications to appear when new renders are started and completed. These notifications contain requestItemId data               which can be used to subscribe to a specific item using POST /renders/subscribeitem/{requestItemId}.
    # @param group_id Id of the group to subscribe to for notifications of new renders.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def renders_subscribe_group_id_post(group_id, opts = {})
      renders_subscribe_group_id_post_with_http_info(group_id, opts)
      return nil
    end

    # Subscribe Group.
    # Subscribe to notifications from a group.               Subscribing to a group will allow notifications to appear when new renders are started and completed. These notifications contain requestItemId data               which can be used to subscribe to a specific item using POST /renders/subscribeitem/{requestItemId}.
    # @param group_id Id of the group to subscribe to for notifications of new renders.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def renders_subscribe_group_id_post_with_http_info(group_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: RendersApi.renders_subscribe_group_id_post ..."
      end
      # verify the required parameter 'group_id' is set
      fail ArgumentError, "Missing the required parameter 'group_id' when calling RendersApi.renders_subscribe_group_id_post" if group_id.nil?
      # resource path
      local_var_path = "/renders/subscribe/{groupId}".sub('{format}','json').sub('{' + 'groupId' + '}', group_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = []
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RendersApi#renders_subscribe_group_id_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Subscribe Item.
    # Subscribe to notifications from a render item. See also /renders/notifications.
    # @param request_item_id Id of the item to subscribe to for notifications of render progress and status.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def renders_subscribeitem_request_item_id_post(request_item_id, opts = {})
      renders_subscribeitem_request_item_id_post_with_http_info(request_item_id, opts)
      return nil
    end

    # Subscribe Item.
    # Subscribe to notifications from a render item. See also /renders/notifications.
    # @param request_item_id Id of the item to subscribe to for notifications of render progress and status.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def renders_subscribeitem_request_item_id_post_with_http_info(request_item_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: RendersApi.renders_subscribeitem_request_item_id_post ..."
      end
      # verify the required parameter 'request_item_id' is set
      fail ArgumentError, "Missing the required parameter 'request_item_id' when calling RendersApi.renders_subscribeitem_request_item_id_post" if request_item_id.nil?
      # resource path
      local_var_path = "/renders/subscribeitem/{requestItemId}".sub('{format}','json').sub('{' + 'requestItemId' + '}', request_item_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = []
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RendersApi#renders_subscribeitem_request_item_id_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
